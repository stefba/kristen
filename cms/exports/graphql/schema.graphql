type ClayBody {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
}

type ClayBodyAggregator {
  count: Int
  totalCount: Int
}

type ClayBodyConnection {
  values: [ClayBody]
  groupBy: ClayBodyGroupBy
  aggregate: ClayBodyAggregator
}

type ClayBodyConnectionCreated_at {
  key: DateTime
  connection: ClayBodyConnection
}

type ClayBodyConnectionId {
  key: ID
  connection: ClayBodyConnection
}

type ClayBodyConnectionName {
  key: String
  connection: ClayBodyConnection
}

type ClayBodyConnectionUpdated_at {
  key: DateTime
  connection: ClayBodyConnection
}

type ClayBodyGroupBy {
  id: [ClayBodyConnectionId]
  created_at: [ClayBodyConnectionCreated_at]
  updated_at: [ClayBodyConnectionUpdated_at]
  Name: [ClayBodyConnectionName]
}

input ClayBodyInput {
  Name: String
}

type ComponentMetaMeta {
  id: ID!
  Width: Float
  Height: Float
  Type: PieceType
  ClayBody: ClayBody
  Firing: Firing
  Process: String
  Length: Float
  glaze: Glaze
}

input ComponentMetaMetaInput {
  Width: Float
  Height: Float
  Type: ID
  ClayBody: ID
  Firing: ID
  Process: String
  Length: Float
  glaze: ID
}

input createClayBodyInput {
  data: ClayBodyInput
}

type createClayBodyPayload {
  clayBody: ClayBody
}

input createFileInput {
  data: FileInput
}

type createFilePayload {
  file: UploadFile
}

input createFiringInput {
  data: FiringInput
}

type createFiringPayload {
  firing: Firing
}

input createGlazeInput {
  data: GlazeInput
}

type createGlazePayload {
  glaze: Glaze
}

input createPieceInput {
  data: PieceInput
}

type createPiecePayload {
  piece: Piece
}

input createPieceTypeInput {
  data: PieceTypeInput
}

type createPieceTypePayload {
  pieceType: PieceType
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteClayBodyInput {
  where: InputID
}

type deleteClayBodyPayload {
  clayBody: ClayBody
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

input deleteFiringInput {
  where: InputID
}

type deleteFiringPayload {
  firing: Firing
}

input deleteGlazeInput {
  where: InputID
}

type deleteGlazePayload {
  glaze: Glaze
}

input deletePieceInput {
  where: InputID
}

type deletePiecePayload {
  piece: Piece
}

input deletePieceTypeInput {
  where: InputID
}

type deletePieceTypePayload {
  pieceType: PieceType
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteSiteInformationPayload {
  siteInformation: SiteInformation
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editClayBodyInput {
  Name: String
}

input editComponentMetaMetaInput {
  id: ID
  Width: Float
  Height: Float
  Type: ID
  ClayBody: ID
  Firing: ID
  Process: String
  Length: Float
  glaze: ID
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editFiringInput {
  Name: String
}

input editGlazeInput {
  Name: String
  Hide: Boolean
}

input editPieceInput {
  Title: String
  Date: DateTime
  Images: [ID]
  Meta: editComponentMetaMetaInput
}

input editPieceTypeInput {
  Name: String
}

input editPostInput {
  Title: String
  Date: Date
  Images: [ID]
  Text: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editSiteInformationInput {
  Title: String
  Description: String
  About: String
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

type Firing {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
}

type FiringAggregator {
  count: Int
  totalCount: Int
}

type FiringConnection {
  values: [Firing]
  groupBy: FiringGroupBy
  aggregate: FiringAggregator
}

type FiringConnectionCreated_at {
  key: DateTime
  connection: FiringConnection
}

type FiringConnectionId {
  key: ID
  connection: FiringConnection
}

type FiringConnectionName {
  key: String
  connection: FiringConnection
}

type FiringConnectionUpdated_at {
  key: DateTime
  connection: FiringConnection
}

type FiringGroupBy {
  id: [FiringConnectionId]
  created_at: [FiringConnectionCreated_at]
  updated_at: [FiringConnectionUpdated_at]
  Name: [FiringConnectionName]
}

input FiringInput {
  Name: String
}

type ForgotPassword {
  ok: Boolean
}

type Glaze {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String!
  Hide: Boolean!
}

type GlazeAggregator {
  count: Int
  totalCount: Int
}

type GlazeConnection {
  values: [Glaze]
  groupBy: GlazeGroupBy
  aggregate: GlazeAggregator
}

type GlazeConnectionCreated_at {
  key: DateTime
  connection: GlazeConnection
}

type GlazeConnectionHide {
  key: Boolean
  connection: GlazeConnection
}

type GlazeConnectionId {
  key: ID
  connection: GlazeConnection
}

type GlazeConnectionName {
  key: String
  connection: GlazeConnection
}

type GlazeConnectionUpdated_at {
  key: DateTime
  connection: GlazeConnection
}

type GlazeGroupBy {
  id: [GlazeConnectionId]
  created_at: [GlazeConnectionCreated_at]
  updated_at: [GlazeConnectionUpdated_at]
  Name: [GlazeConnectionName]
  Hide: [GlazeConnectionHide]
}

input GlazeInput {
  Name: String!
  Hide: Boolean!
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | ForgotPassword | ClayBody | ClayBodyConnection | ClayBodyAggregator | ClayBodyGroupBy | ClayBodyConnectionId | ClayBodyConnectionCreated_at | ClayBodyConnectionUpdated_at | ClayBodyConnectionName | createClayBodyPayload | updateClayBodyPayload | deleteClayBodyPayload | Firing | FiringConnection | FiringAggregator | FiringGroupBy | FiringConnectionId | FiringConnectionCreated_at | FiringConnectionUpdated_at | FiringConnectionName | createFiringPayload | updateFiringPayload | deleteFiringPayload | Glaze | GlazeConnection | GlazeAggregator | GlazeGroupBy | GlazeConnectionId | GlazeConnectionCreated_at | GlazeConnectionUpdated_at | GlazeConnectionName | GlazeConnectionHide | createGlazePayload | updateGlazePayload | deleteGlazePayload | PieceType | PieceTypeConnection | PieceTypeAggregator | PieceTypeGroupBy | PieceTypeConnectionId | PieceTypeConnectionCreated_at | PieceTypeConnectionUpdated_at | PieceTypeConnectionName | createPieceTypePayload | updatePieceTypePayload | deletePieceTypePayload | Piece | PieceConnection | PieceAggregator | PieceGroupBy | PieceConnectionId | PieceConnectionCreated_at | PieceConnectionUpdated_at | PieceConnectionTitle | PieceConnectionDate | PieceConnectionMeta | createPiecePayload | updatePiecePayload | deletePiecePayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionTitle | PostConnectionDate | PostConnectionText | createPostPayload | updatePostPayload | deletePostPayload | SiteInformation | updateSiteInformationPayload | deleteSiteInformationPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | createFilePayload | updateFilePayload | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentMetaMeta

type Mutation {
  createClayBody(input: createClayBodyInput): createClayBodyPayload
  updateClayBody(input: updateClayBodyInput): updateClayBodyPayload
  deleteClayBody(input: deleteClayBodyInput): deleteClayBodyPayload
  createFiring(input: createFiringInput): createFiringPayload
  updateFiring(input: updateFiringInput): updateFiringPayload
  deleteFiring(input: deleteFiringInput): deleteFiringPayload
  createGlaze(input: createGlazeInput): createGlazePayload
  updateGlaze(input: updateGlazeInput): updateGlazePayload
  deleteGlaze(input: deleteGlazeInput): deleteGlazePayload
  createPieceType(input: createPieceTypeInput): createPieceTypePayload
  updatePieceType(input: updatePieceTypeInput): updatePieceTypePayload
  deletePieceType(input: deletePieceTypeInput): deletePieceTypePayload
  createPiece(input: createPieceInput): createPiecePayload
  updatePiece(input: updatePieceInput): updatePiecePayload
  deletePiece(input: deletePieceInput): deletePiecePayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  updateSiteInformation(input: updateSiteInformationInput): updateSiteInformationPayload
  deleteSiteInformation: deleteSiteInformationPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): ForgotPassword
  changePassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

type Piece {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  Date: DateTime!
  Meta: ComponentMetaMeta
  Images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type PieceAggregator {
  count: Int
  totalCount: Int
}

type PieceConnection {
  values: [Piece]
  groupBy: PieceGroupBy
  aggregate: PieceAggregator
}

type PieceConnectionCreated_at {
  key: DateTime
  connection: PieceConnection
}

type PieceConnectionDate {
  key: DateTime
  connection: PieceConnection
}

type PieceConnectionId {
  key: ID
  connection: PieceConnection
}

type PieceConnectionMeta {
  key: ID
  connection: PieceConnection
}

type PieceConnectionTitle {
  key: String
  connection: PieceConnection
}

type PieceConnectionUpdated_at {
  key: DateTime
  connection: PieceConnection
}

type PieceGroupBy {
  id: [PieceConnectionId]
  created_at: [PieceConnectionCreated_at]
  updated_at: [PieceConnectionUpdated_at]
  Title: [PieceConnectionTitle]
  Date: [PieceConnectionDate]
  Meta: [PieceConnectionMeta]
}

input PieceInput {
  Title: String!
  Date: DateTime!
  Images: [ID]
  Meta: ComponentMetaMetaInput!
}

type PieceType {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String!
}

type PieceTypeAggregator {
  count: Int
  totalCount: Int
}

type PieceTypeConnection {
  values: [PieceType]
  groupBy: PieceTypeGroupBy
  aggregate: PieceTypeAggregator
}

type PieceTypeConnectionCreated_at {
  key: DateTime
  connection: PieceTypeConnection
}

type PieceTypeConnectionId {
  key: ID
  connection: PieceTypeConnection
}

type PieceTypeConnectionName {
  key: String
  connection: PieceTypeConnection
}

type PieceTypeConnectionUpdated_at {
  key: DateTime
  connection: PieceTypeConnection
}

type PieceTypeGroupBy {
  id: [PieceTypeConnectionId]
  created_at: [PieceTypeConnectionCreated_at]
  updated_at: [PieceTypeConnectionUpdated_at]
  Name: [PieceTypeConnectionName]
}

input PieceTypeInput {
  Name: String!
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String!
  Date: Date!
  Text: String
  Images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionDate {
  key: ID
  connection: PostConnection
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionText {
  key: String
  connection: PostConnection
}

type PostConnectionTitle {
  key: String
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  Title: [PostConnectionTitle]
  Date: [PostConnectionDate]
  Text: [PostConnectionText]
}

input PostInput {
  Title: String!
  Date: Date!
  Images: [ID]
  Text: String
}

type Query {
  clayBody(id: ID!): ClayBody
  clayBodies(sort: String, limit: Int, start: Int, where: JSON): [ClayBody]
  clayBodiesConnection(sort: String, limit: Int, start: Int, where: JSON): ClayBodyConnection
  firing(id: ID!): Firing
  firings(sort: String, limit: Int, start: Int, where: JSON): [Firing]
  firingsConnection(sort: String, limit: Int, start: Int, where: JSON): FiringConnection
  glaze(id: ID!): Glaze
  glazes(sort: String, limit: Int, start: Int, where: JSON): [Glaze]
  glazesConnection(sort: String, limit: Int, start: Int, where: JSON): GlazeConnection
  pieceType(id: ID!): PieceType
  pieceTypes(sort: String, limit: Int, start: Int, where: JSON): [PieceType]
  pieceTypesConnection(sort: String, limit: Int, start: Int, where: JSON): PieceTypeConnection
  piece(id: ID!): Piece
  pieces(sort: String, limit: Int, start: Int, where: JSON): [Piece]
  piecesConnection(sort: String, limit: Int, start: Int, where: JSON): PieceConnection
  post(id: ID!): Post
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  siteInformation: SiteInformation
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type SiteInformation {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Title: String
  Description: String
  About: String
}

input SiteInformationInput {
  Title: String
  Description: String
  About: String
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input updateClayBodyInput {
  where: InputID
  data: editClayBodyInput
}

type updateClayBodyPayload {
  clayBody: ClayBody
}

input updateFileInput {
  where: InputID
  data: editFileInput
}

type updateFilePayload {
  file: UploadFile
}

input updateFiringInput {
  where: InputID
  data: editFiringInput
}

type updateFiringPayload {
  firing: Firing
}

input updateGlazeInput {
  where: InputID
  data: editGlazeInput
}

type updateGlazePayload {
  glaze: Glaze
}

input updatePieceInput {
  where: InputID
  data: editPieceInput
}

type updatePiecePayload {
  piece: Piece
}

input updatePieceTypeInput {
  where: InputID
  data: editPieceTypeInput
}

type updatePieceTypePayload {
  pieceType: PieceType
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateSiteInformationInput {
  data: editSiteInformationInput
}

type updateSiteInformationPayload {
  siteInformation: SiteInformation
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
